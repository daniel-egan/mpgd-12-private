//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""actionMapMain"",
            ""id"": ""75dd9305-5928-420c-9f41-2ec1d40cdf21"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""fbd9e126-7aba-4b3f-924c-cf1d74fca7fa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d24ae6ab-64d6-4e40-93c7-fb8158f4cfc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""fecfb7c0-c58c-4a94-9aa0-56e7fd43e145"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""908f9eb2-d3c1-43ea-b325-1967dd723bc3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WRUp"",
                    ""type"": ""Button"",
                    ""id"": ""74c47e0c-f51e-4f4a-80a3-e6727e2d5c10"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WRDown"",
                    ""type"": ""Button"",
                    ""id"": ""0dfe4503-b693-4ca5-a4f4-f5e6740b60a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grapple"",
                    ""type"": ""Button"",
                    ""id"": ""d0ae474b-c0ac-4c0b-8015-c8f0a6249b7e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e1bdedd7-1725-40ce-a01e-198112449b1a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0bfee070-21ba-4ca3-b6d4-cd0b866d7c02"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4c0382a7-75d2-4e57-93db-acd26d29f2fa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d231d8fe-cd12-47f1-90bf-4c68603a24e2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4418206d-c4f3-4379-a7b2-c8bde7dd61ab"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""33381e95-03a7-4ae0-b2b8-9e2938f6fd17"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93706afa-4198-4ebf-958b-655928e70b5d"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abc57e1e-1b7e-43c8-b2a3-d4adbac31bce"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6bd448b-c2c3-4d9d-8127-be8dd891a086"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WRUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21b6749e-afd6-497d-8a2c-4ddbc56a360f"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WRDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1895ecc-14ea-44e7-a592-9801324383ed"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // actionMapMain
        m_actionMapMain = asset.FindActionMap("actionMapMain", throwIfNotFound: true);
        m_actionMapMain_Movement = m_actionMapMain.FindAction("Movement", throwIfNotFound: true);
        m_actionMapMain_Jump = m_actionMapMain.FindAction("Jump", throwIfNotFound: true);
        m_actionMapMain_Look = m_actionMapMain.FindAction("Look", throwIfNotFound: true);
        m_actionMapMain_Reset = m_actionMapMain.FindAction("Reset", throwIfNotFound: true);
        m_actionMapMain_WRUp = m_actionMapMain.FindAction("WRUp", throwIfNotFound: true);
        m_actionMapMain_WRDown = m_actionMapMain.FindAction("WRDown", throwIfNotFound: true);
        m_actionMapMain_Grapple = m_actionMapMain.FindAction("Grapple", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // actionMapMain
    private readonly InputActionMap m_actionMapMain;
    private List<IActionMapMainActions> m_ActionMapMainActionsCallbackInterfaces = new List<IActionMapMainActions>();
    private readonly InputAction m_actionMapMain_Movement;
    private readonly InputAction m_actionMapMain_Jump;
    private readonly InputAction m_actionMapMain_Look;
    private readonly InputAction m_actionMapMain_Reset;
    private readonly InputAction m_actionMapMain_WRUp;
    private readonly InputAction m_actionMapMain_WRDown;
    private readonly InputAction m_actionMapMain_Grapple;
    public struct ActionMapMainActions
    {
        private @PlayerInput m_Wrapper;
        public ActionMapMainActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_actionMapMain_Movement;
        public InputAction @Jump => m_Wrapper.m_actionMapMain_Jump;
        public InputAction @Look => m_Wrapper.m_actionMapMain_Look;
        public InputAction @Reset => m_Wrapper.m_actionMapMain_Reset;
        public InputAction @WRUp => m_Wrapper.m_actionMapMain_WRUp;
        public InputAction @WRDown => m_Wrapper.m_actionMapMain_WRDown;
        public InputAction @Grapple => m_Wrapper.m_actionMapMain_Grapple;
        public InputActionMap Get() { return m_Wrapper.m_actionMapMain; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionMapMainActions set) { return set.Get(); }
        public void AddCallbacks(IActionMapMainActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionMapMainActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionMapMainActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Reset.started += instance.OnReset;
            @Reset.performed += instance.OnReset;
            @Reset.canceled += instance.OnReset;
            @WRUp.started += instance.OnWRUp;
            @WRUp.performed += instance.OnWRUp;
            @WRUp.canceled += instance.OnWRUp;
            @WRDown.started += instance.OnWRDown;
            @WRDown.performed += instance.OnWRDown;
            @WRDown.canceled += instance.OnWRDown;
            @Grapple.started += instance.OnGrapple;
            @Grapple.performed += instance.OnGrapple;
            @Grapple.canceled += instance.OnGrapple;
        }

        private void UnregisterCallbacks(IActionMapMainActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Reset.started -= instance.OnReset;
            @Reset.performed -= instance.OnReset;
            @Reset.canceled -= instance.OnReset;
            @WRUp.started -= instance.OnWRUp;
            @WRUp.performed -= instance.OnWRUp;
            @WRUp.canceled -= instance.OnWRUp;
            @WRDown.started -= instance.OnWRDown;
            @WRDown.performed -= instance.OnWRDown;
            @WRDown.canceled -= instance.OnWRDown;
            @Grapple.started -= instance.OnGrapple;
            @Grapple.performed -= instance.OnGrapple;
            @Grapple.canceled -= instance.OnGrapple;
        }

        public void RemoveCallbacks(IActionMapMainActions instance)
        {
            if (m_Wrapper.m_ActionMapMainActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionMapMainActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionMapMainActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionMapMainActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionMapMainActions @actionMapMain => new ActionMapMainActions(this);
    public interface IActionMapMainActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
        void OnWRUp(InputAction.CallbackContext context);
        void OnWRDown(InputAction.CallbackContext context);
        void OnGrapple(InputAction.CallbackContext context);
    }
}
